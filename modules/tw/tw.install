<?php
// $Id: tw.install,v 1.1.2.10 2009/07/10 18:36:26 mikeryan Exp $

/**
 * @file
 */

/**
 * Implementation of hook_schema().
 */
function tw_schema() {
  $schema['tw_tables'] = array(
    'description' => t('Tables tracked by the Table Wizard module'),
    'fields' => array(
      'twtid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tablename' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'dbconnection' => array(
        'type' => 'varchar',
        'length' => 255,
        'non null' => TRUE,
        'default' => 'default',
      ),
      'existing_view_data' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
    ),
    'primary key' => array('twtid'),
  );

  $schema['tw_columns'] = array(
    'description' => t('Information on fields (columns) in tables managed by Table Wizard'),
    'fields' => array(
      'twcid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'twtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'colname' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'primarykey' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'availablefk' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => (int)FALSE,
      ),
      'secure' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'ignorecol' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'isempty' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'coltype' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'minlength' => array(
        'type' => 'int',
      ),
      'maxlength' => array(
        'type' => 'int',
      ),
      'minvalue' => array(
        'type' => 'float',
      ),
      'maxvalue' => array(
        'type' => 'float',
      ),
      'minstring' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'maxstring' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'comments' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('twcid'),
    'unique keys' => array(
      'colkey' => array('twtid', 'colname'),
    ),
  );
  
  $schema['tw_relationships'] = array(
    'description' => t('Information on relationships between tables'),
    'fields' => array(
      'twrid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'leftcol' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rightcol' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'automatic' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
    ),
    'primary key' => array('twrid'),
    'unique keys' => array(
      'colkey' => array('leftcol', 'rightcol'),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function tw_install() {
  // Create tables
  drupal_install_schema('tw');
}

/**
 * Implementation of hook_uninstall().
 */
function tw_uninstall() {
  // Remove tables
  drupal_uninstall_schema('tw');
}

// Add database field to tw_tables
function tw_update_6000() {
  $ret = array();
  $field = array(
    'type' => 'varchar',
    'length' => 255,
    'non null' => TRUE,
    'default' => 'default',
  );
  db_add_field($ret, 'tw_tables', 'tabledb', $field);
  return $ret;
}

// Remove prefixes from tables in the default connection
function tw_update_6001() {
  $ret = array();
  $sql = "SELECT * FROM {tw_tables}";
  $result = db_query($sql);
  while ($row = db_fetch_object($result)) {
    $unprefixed = schema_unprefix_table($row->tablename);
    $ret[] = update_sql("UPDATE {tw_tables} 
                         SET tablename='" . $unprefixed ."'
                         WHERE twtid=" . $row->twtid);
  }
  return $ret;
}

// Rename tabledb field to connection
function tw_update_6002() {
  $ret = array();
  db_change_field($ret, 'tw_tables', 'tabledb', 'connection', 
    array(
        'type' => 'varchar',
        'length' => 255,
        'non null' => TRUE,
        'default' => 'default',
      )
  );
  return $ret;
}

// "connection" is a reserved word in earlier versions of MySQL, rename to dbconnection
function tw_update_6003() {
  $ret = array();
  db_change_field($ret, 'tw_tables', 'connection', 'dbconnection', 
    array(
        'type' => 'varchar',
        'length' => 255,
        'non null' => TRUE,
        'default' => 'default',
      )
  );
  return $ret;
}

// Add support for distinguishing between automatic and manual relationships
function tw_update_6004() {
  $ret = array();
  db_add_field($ret, 'tw_relationships', 'automatic',
    array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE,
          'default' => (int)FALSE));
  return $ret;
}

// Flag to 
function tw_update_6005() {
  $ret = array();
  db_add_field($ret, 'tw_tables', 'existing_view_data',
    array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE,
          'default' => (int)FALSE));
  return $ret;
}