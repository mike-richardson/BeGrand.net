<?php
// $Id: custom_breadcrumbs.module,v 1.6.2.5.2.30 2009/11/29 03:54:11 mgn Exp $

/**
 * @file
 * Provide custom breadcrumbs for node-type pages and base functionality
 * for submodules to add custom breadcrumbs for other types of pages.
 */

/**
 * Implementation of hook_cb_breadcrumb_info().
 *
 * @return
 *   An array of arrays describing the breadcrumbs provided by the module.
 *   Provide one array for each type of breadcrumb. Each array should have elements:
 *     'table' indicating the db_table to load the breadcrumb from,
 *     'field' a unique field of the database table used to identify the breadcrumb,
 *     'type' a string used for indicating the breadcrumb type on the admin list.
 *     'name_constructor' a function which generates the breadcrumb name from the breadcrumb.
 */
function custom_breadcrumbs_cb_breadcrumb_info() {
  $breadcrumb_type_info = array();
  $breadcrumb_type_info['node'] = array(
    'table' => 'custom_breadcrumb',
    'field' => 'node_type',
    'type'  => 'node',
    'name_constructor' => '_custom_breadcrumbs_breadcrumb_name',
  );
  return $breadcrumb_type_info;
}

/**
 * Construct a default name to display in the admin screen.
 */
function _custom_breadcrumbs_breadcrumb_name($breadcrumb) {
  if (isset($breadcrumb->node_type)) {
    return $breadcrumb->node_type;
  }
}

/**
 * Implementation of hook_theme().
 */
function custom_breadcrumbs_theme() {
  return array(
    'custom_breadcrumbs_filter_form' => array(
      'arguments' => array('form' => array()),
      'file' => 'custom_breadcrumbs.admin.inc',
    ),
    'custom_breadcrumbs_filters' => array(
      'arguments' => array('form' => array()),
      'file' => 'custom_breadcrumbs.admin.inc',
    ),
    'custom_breadcrumbs_help_identifiers' => array(
      'arguments' => array(),
    ),
    'custom_breadcrumbs_module_weight' => array(
      'arguments' => array('form' => array()),
      'file' => 'custom_breadcrumbs.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function custom_breadcrumbs_menu() {
  $items = array();
  $items['admin/build/custom_breadcrumbs'] = array(
    'title'            => 'Custom Breadcrumbs',
    'description'      => 'Custom breadcrumbs',
    'page callback'    => 'custom_breadcrumbs_page',
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs.admin.inc',
  );
  $items['admin/build/custom_breadcrumbs/list'] = array(
    'title'            => 'List',
    'page callback'    => 'custom_breadcrumbs_page',
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs.admin.inc',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
  );

  $items['admin/build/custom_breadcrumbs/node/add'] = array(
    'title'            => 'Node',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_form', 'node'),
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs.admin.inc',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
  );

  $items['admin/build/custom_breadcrumbs/node/edit'] = array(
    'title'            => 'Edit custom breadcrumb for nodes',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_form', 'node'),
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs.admin.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['admin/settings/custom-breadcrumbs'] = array(
    'title'            => 'Custom Breadcrumb Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_admin_settings'),
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function custom_breadcrumbs_init() {
  if (!custom_breadcrumbs_exclude_path()) {
    if (variable_get('custom_breadcrumbs_set_global_home_breadcrumb', FALSE)) {
      // Use default menu structure to set the breadcrumb.
      $trail = drupal_get_breadcrumb();
      if (!empty($trail)) {
        array_shift($trail);
        $cb_home = custom_breadcrumbs_home_crumb();
        if (!empty($cb_home)) {
          array_unshift($trail, array_pop($cb_home));
        }
        drupal_set_breadcrumb($trail);
      }
    }

    if (variable_get('custom_breadcrumbs_set_menu_breadcrumb', FALSE)) {
      // Use default menu structure to set the breadcrumb.
      custom_breadcrumbs_set_menu_breadcrumb();
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function custom_breadcrumbs_perm() {
  return array('administer custom breadcrumbs', 'use php in custom breadcrumbs');
}

/**
 * Implementation of hook_help().
 */
function custom_breadcrumbs_help($path, $arg) {
  switch ($path) {
    case 'admin/help#custom_breadcrumbs':
     $output = '<p>'. t("Custom Breadcrumbs allows you to create and modify your own breadcrumbs based on node type. After enabling the module, click on Administer > Site building > Custom breadcrumbs. Select <em>Node Type</em> at the top of the page to create breadcrumbs according to node type. Other types (such as views, paths, and taxonomy) may also be present, depending on what modules have been installed.") .'</p>';
      $output .= '<p>'. t("On the <em>Node Type</em> page, select the node type the breadcrumb will apply to. There are two text fields below-- 'Titles' and 'Paths.' When creating  a breadcrumb, you are simply creating a link. In the custom breadcrumbs interface 'Titles' describes the text of the breadcrumb while 'Paths' describes the Drupal path the breadcrumb links to. Each Title must have a corresponding Path.") .'</p>';
      $output .= '<p>'. t("To give a very simple example of how to use this module, let's say I have a blog on my web site called 'Deep Thoughts.' To create this, I use the Views module to create a page at /blog that displays all the node types 'blog post.' Whenever a user views a blog post I want the breadcrumb to show Home > Deep Thoughts instead of simply Home. To do this I would simply type 'Deep Thoughts' in the 'Titles' field and and 'blog' in the 'Paths' field and save my breadcrumb.") .'</p>';
      $output .= '<p>'. t("Using the Tokens module, the Custom breadcrumbs module becomes much more flexible because breadcrumbs can become dynamic. You can create a breadcrumb like Home > Deep Thoughts > [Month of Blog Post] [Year of Blog Post], where 'Deep Thoughts' links to my main blog page and '[Month of Blog Post] [Year of Blog Post]' links to a view that shows only blog posts from the month and year the blog post was created (e.g. June 2007). For this, you would do the following:") .'</p>';
      $output .= '<p>'. t("Node Type:<br />Blog Post<br /><br />Titles:<br />Deep Thoughts<br />[month] [yyyy]<br /><br />Paths:<br />blog<br />blog/[mm]_[yyyy]<br />(where of course, blog/[mm]_[yyyy] is the path to the view of blog posts from that month and year). So if you created a blog pos on June 13, 2007 your breadcrumb would show Home > Deep Thoughts > June 2007 and 'June 2007' links to 'blog/06_2007' which is a view of all blog posts from June 2007.") .'</p>';
      $output .= '<p>'. t("Also, note that Custom Breadcrumbs doesn't actually check to be sure that a particular path 
exists, so you'll have to check yourself to avoid 404 errors.") .'</p>';
      $output .= '<p>'. t("Only users with 'administer custom breadcrumbs' permission will be allowed to create or modify custom breadcrumbs.") .'</p>';
      $output .= '<h2>'. t("Breadcrumb Visibility") .'</h2>';
      $output .= '<p>'. t("Users given 'use php in custom breadcrumbs' permission can include php code snippet that returns TRUE or FALSE to control whether or not the breadcrumb is displayed. Note that this code has access to the %node variable, and can check its type or any other property.", array('%node' => '$node')) .'</p>';
      $output .= '<h2>'. t("Special Identifiers") .'</h2>';
      $output .= '<p>'. t("The following identifiers can be used to achieve a special behavior:");
      $output .= '<ul><li>'. t("%pathauto - will clean any path using the current pathauto module settings, if that module is installed.", array('%pathauto' => '<pathauto>')) .'</li>';
      $output .= '<li>'. t("%none - can be used as a path to have a breadcrumb element that is not hyperlinked.", array('%none' => '<none>')) .'</li></ul>';
      $output .= '<p>'. t("Identifiers should be added to the paths area in the following format: identifier|path. To be recognized, the idenfier must be enclosed in angular brackets, and proceed any part of the path. For example: %pathauto|[ogname-raw]", array('%pathauto' => '<pathauto>')) .'</p>';
      return $output;
    case 'admin/build/custom_breadcrumbs':
      $output = t("To create a custom breadcrumb, choose one of the breadcrumbs types listed above. The following table lists all of the custom breadcrumbs that have been defined. The list can be filtered by breadcrumb type or language, or sorted by clicking on one of the column headings.");
      return $output;
  } 
}

/**
 * Implementation of hook_nodeapi().
 */
function custom_breadcrumbs_nodeapi($node, $op, $teaser, $page) {
  if ($op == 'alter' && empty($teaser) && !empty($page)) {
    // Check for breadcrumb for this node type.
    global $language;
    $languages = array('language' => $language->language, 'all' => '');
    $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs', NULL, array('node_type' => $node->type), $languages);
    if (!empty($breadcrumbs)) {
      $objs = array('node' => $node);
      if ($breadcrumb = custom_breadcrumbs_select_breadcrumb($breadcrumbs, $objs)) {
        custom_breadcrumbs_set_breadcrumb($breadcrumb, $objs);
      }
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function custom_breadcrumbs_form_alter(&$form, $form_state, $form_id) {
  // Provide custom breadcrumbs for comment forms associated with nodes.
  if ($form_id == 'comment_form' && isset($form['nid']['#value'])) {
    $node = node_load($form['nid']['#value']);
    // Call custom_breadcrumbs_nodeapi to provide a custom_breadcrumb for this comment.
    custom_breadcrumbs_nodeapi($node, 'alter', array(), array(1));
  } 
  elseif (user_access('administer custom breadcrumbs') && isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    // Provide a custom breadcrumbs fieldset for node edit forms.
    $node = $form['#node'];
    // Load all custom breadcrumbs for this node type.
    $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs', 'custom_breadcrumb', array('node_type' => $form['type']['#value']));
    foreach (module_implements('cb_node_form_table') as $module) {
      $func = $module .'_cb_node_form_table'; 
      $more = $func($node);
      if (!empty($more)) {
        $breadcrumbs = array_merge($breadcrumbs, $more);
      }
    }

    $output = NULL;
    if (count($breadcrumbs) > 0) {
      $output = '<p>'. t('Custom breadcrumbs have been created for this %type page. Use the <a href="@link">Custom Breadcrumbs Administration Page</a> to add additional breadcrumbs, or follow the links in the table below to edit or delete existing custom breadcrumbs.', array('%type' => $form['type']['#value'], '@link' => url('admin/build/custom_breadcrumbs'))) .'</p>';
    }
    // Show a table of custom breadcrumbs with links to the edit form.
    module_load_include('inc', 'custom_breadcrumbs', 'custom_breadcrumbs.admin');

    $output .= custom_breadcrumbs_simple_breadcrumb_table($breadcrumbs);
    $form['custom_breadcrumbs'] = array(
      '#type'           => 'fieldset',
      '#title'          => t('Custom Breadcrumbs'),
      '#access'         => user_access('administer custom breadcrumbs'),
      '#collapsible'    => TRUE,
      '#collapsed'      => TRUE,
      '#weight'         => -50,
    );
    $form['custom_breadcrumbs']['breadcrumb_table'] = array('#value' => $output, );
  }
}

/**
 * Select a breadcrumb from an array of breadcrumbs.
 *
 * @param $breadcrumbs 
 *   The array of breadcrumb objects that the breadcrumb will be selected from.
 * @param $obj
 *   An optional object (node, view, ...) to aid in the selection process.
 *
 * @return $breadcrumb 
 *   The selected breadcrumb object.
 */
function custom_breadcrumbs_select_breadcrumb($breadcrumbs, $objs = array()) {
  while ($breadcrumb = array_pop($breadcrumbs)) {
    if (custom_breadcrumbs_is_visible($breadcrumb, $objs)) {
      return $breadcrumb;
    }
  }
}

/**
 * Set the custom breadcrumb.
 *
 * This can be used by submodules, but they could also provide their own function.
 * @param $breadcrumb
 *   The breadcrumb object
 * @param $obj
 *   A node object (if available) for building token substituions.
 */
function custom_breadcrumbs_set_breadcrumb($breadcrumb, $objs = array()) {
  if ($breadcrumb && !custom_breadcrumbs_exclude_path()) {
    $location = array();
    $trail = custom_breadcrumbs_home_crumb();
    if (!empty($trail)) {
      $title = variable_get('custom_breadcrumb_home', t('Home'));
      $location = array('title' => variable_get('custom_breadcrumb_home', t('Home')), 'href' => '<front>', 'localized_options' => array());
    }
    if (variable_get('custom_breadcrumbs_use_php_in_titles', FALSE)) {
      $titles = extract_php($breadcrumb->titles, $objs);
      // Titles and paths arrays can also be provided as elements of an associative array.
      if (isset($titles['titles']) && is_array($titles['titles']) && isset($titles['paths']) && is_array($titles['paths'])) {
        $paths = $titles['paths'];
        $titles = $titles['titles'];
      }
      else {
        $paths = extract_php($breadcrumb->paths, $objs);
      }
    }
    if (!isset($titles) || is_null($titles)) {
      $titles = preg_split("/[\n]+/", $breadcrumb->titles);
    }
    if (!isset($paths) || is_null($paths)) {
      $paths = preg_split("/[\n]+/", $breadcrumb->paths);
    }

    if (module_exists('token')) {
      // Do token replacement.
      $types = custom_breadcrumbs_token_types($objs);
      $titles = token_replace_multiple($titles, $types);
      $paths = token_replace_multiple($paths, $types);
    }
  
    for ($i = 0; $i < count($titles); $i++) {
      $title = trim($titles[$i]);
      if (($title != '') && ($title != '<none>')) {
        // Create breadcrumb only if there is a title.
        $trail[] = _custom_breadcrumbs_create_crumb($title, trim($paths[$i]));
        $location[] = array('title' => $title, 'href' => drupal_get_normal_path(trim($paths[$i])));
      }
    }
    if (variable_get('custom_breadcrumbs_force_active_trail', FALSE)) {
      menu_set_active_trail($location);
    }
    drupal_set_breadcrumb($trail);
  }
}

/**
 *  Helper function to prepare some common contexts for token substitution.
 *
 *  @param $objs
 *    An array of objects to be used in token replacement. Array keys indicate type of object.
 *
 *  @return $types
 *    An array of substitution classes for token_replace_multiple().
 */
function custom_breadcrumbs_token_types($objs = array()) {
  if (!isset($objs['user'])) {
    global $user;
    if ($user->uid) {
      $user = user_load(array('uid' => $user->uid));
    }
    $objs['user'] = $user;
  }
  $objs['global'] = NULL;

  return $objs;
}

/**
 * Private function to save breadcrumb.
 *
 * @param $module
 *   The name of the custom breadcrumbs submodule that created the breadcrumb.
 * @param $key
 *   The breadcrumb to save.
 * @param $breadcrumb
 *   Any additional submodule function to call after breadcrumb has been saved.
 */
function _custom_breadcrumbs_save_breadcrumb($module, $key, $breadcrumb) {
  if (is_array($breadcrumb->paths)) {
    $breadcrumb->paths = implode("\n", $breadcrumb->paths);
  }
  if (is_array($breadcrumb->titles)) {
    $breadcrumb->titles = implode("\n", $breadcrumb->titles);
  }
  $info = module_invoke($module, 'cb_breadcrumb_info');
  if (isset($info[$key])) {
    if ((!isset($breadcrumb->name) || $breadcrumb->name == '') && isset($info[$key]['name_constructor']) && function_exists($info[$key]['name_constructor'])) {
      $breadcrumb->name = $info[$key]['name_constructor']($breadcrumb);
    }
    if (isset($breadcrumb->bid)) {
      drupal_write_record($info[$key]['table'], $breadcrumb, 'bid');
    }
    else {
      drupal_write_record($info[$key]['table'], $breadcrumb);
    }
  }
}

/**
 * Private function to delete breadcrumb.
 *
 * @param $table
 *   The table to delete the breadcrumb from.
 * @param $bid
 *   The id for the breadcrumb that is to be deleted.
 * @param $func
 *   Any additional submodule function to call after breadcrumb has been deleted.
 */
function _custom_breadcrumbs_delete_breadcrumb($module, $key, $bid) {
  $info = module_invoke($module, 'cb_breadcrumb_info'); 
  if (isset($info[$key]['table'])) {  
    db_query('DELETE FROM {'. $info[$key]['table'] .'} WHERE bid = %d', $bid);
  }
}

/**
 * Create the Home breadcrumb trail.
 *
 * @return
 *   The home breadcrumb item.
 */
function custom_breadcrumbs_home_crumb() {
  $hometext = variable_get('custom_breadcrumb_home', t('Home'));
  if ($hometext != '') {
    $trail = array(l($hometext, '<front>'));
  }
  else {
    $trail = array();
  }
  return $trail;
}

/**
 * Private function for custom breadcrumb to create a crumb item.
 *
 * @param $title
 *   The human readable title to be rendered by the browser.
 * @param $original_path
 *   The desired URI and/or special identifier.
 *
 * @return
 *   An HTML string containing a link to the original path.
 */
function _custom_breadcrumbs_create_crumb($title, $original_path) {
  // Decode title to properly handle special characters.
  $title = decode_entities($title);
  // Collapse double slashes to one.
  $original_path = preg_replace('/\/+/', '/', $original_path);
  // Removing leading and trailing slashes.
  $original_path = preg_replace('/^\/|\/+$/', '', $original_path);
  list($identifier, $path) = explode("|", $original_path, 2);
  if (isset($path) && $path !== '') {
    $options = parse_url($path);
    switch (trim($identifier)) {
      case '<pathauto>':
        if (module_exists('pathauto')) {
          module_load_include('inc', 'pathauto', 'pathauto');
          $crumb = l($title, pathauto_cleanstring($options['path'], FALSE), $options);
        }
        break;
      default:
        $crumb = l($title, $options['path'], $options);
    }
  }
  else {
    // This may be just be a single identifier.
    $options = parse_url($original_path);
    switch ($identifier) {
      case '<none>':
        $crumb = check_plain($title);
        break;
      default:
        $crumb = l($title, $options['path'], $options);
    }
  }
  return $crumb;
}

/**
 * Builds a table of identifiers and their behaviors.
 *
 * @ingroup themeable
 */
function theme_custom_breadcrumbs_help_identifiers()  {
  $headers = array(t('Identifier'), t('Behaviour'));
  $rows = array();
  $row = array();
  // <none> identifier.
  $row[] = check_plain('<none>');
  $row[] = t('This will result in a plain text crumb. This identifier should not be used with the pipe (|) symbol.');
  $rows[] = $row;

  // <pathauto> identifier.
  if (module_exists('pathauto')) {
    $row = array();
    $row[] = check_plain('<pathauto>');
    $row[] = t('Cleans the given path using your pathauto replacement rules.');
    $rows[] = $row;
  }
  return theme('table', $headers, $rows, array('class' => 'description'));
}

/**
 * Load the custom breadcrumb from submodule table.
 *
 *  @param $module
 *    The name of the custom breadcrumbs submodule managing the requested breadcrumb.
 *  @param $table
 *    The name of the table to limit the search to. This only needs to be provided if
 *    the submodule provides breadcrumbs from more than one table.
 *  @param $param
 *    An array of the form 'field' => $value used in the SQL WHERE clause.
 *
 *  @return
 *    if $param is empty, all breadcrumbs from the table will be returned as an array
 *    otherwise a single breadcrumb object is be returned.
 */
function custom_breadcrumbs_load_breadcrumbs($module, $table = NULL,  $param = array(), $languages = array()) {
  $breadcrumbs = array();
  $bc_info = module_invoke($module, 'cb_breadcrumb_info');
  foreach ($bc_info as $info) {
    if (!isset($table) || ($info['table'] == $table)) {
      $args = array();
      $cond = array();
      $sql = "SELECT * FROM {". $info['table'] ."}";
      if ($p = !empty($param)) {
        $sql .= " WHERE ";
        foreach ($param as $key => $value) {
          $cond[] = db_escape_string($key) ." = '%s'";
          $args[] = $value;
        }
        $cond = implode(' AND ', $cond);
        if ($cond != '') {
          $sql .= $cond;
        }
      }
      if (!empty($languages)) {
        $sql .= ($p) ? " AND " : " WHERE ";
        $sql .= "language IN (".  db_placeholders($languages, 'text') .") ORDER BY language ASC";
        $args = array_merge($args, $languages);
      }
      $result = db_query($sql, $args);
      while ($breadcrumb = db_fetch_object($result)) {
        if (!isset($breadcrumb->name)) {
          $breadcrumb->name = (isset($info['name_constructor'])) ? $info['name_constructor']($breadcrumb) : $breadcrumb->$info['field'];
        }
        $breadcrumb->breadcrumb_type = $info['type'];
        $breadcrumbs[] = $breadcrumb;
      }
    }
  }
  return $breadcrumbs;
}

/**
 *  Use PHP code to determine the breadcrumb visibility.
 *
 *  @param $breadcrumb
 *    The breadcrumb object.
 *  @param $objs
 *    An array of objects (node, taxonomy, or view) that can be used in the php code.
 *
 *  @return
 *    TRUE if the breadcrumb should be displayed, FALSE otherwise.
 */
function custom_breadcrumbs_is_visible($breadcrumb, $objs = array()) {
  $visibility = TRUE;
  if (isset($breadcrumb)) {
    // Provide access to objects by standard variable names.
    foreach ($objs as $key => $obj) {
      $$key = $obj;
    }
    // Guard against hidden spaces.
    if (isset($breadcrumb->visibility_php) && ($trimmed = trim($breadcrumb->visibility_php)) != '' ) {
      ob_start();
      $visibility = eval($trimmed);
      ob_end_clean();
    }
  }
  return $visibility;
}

/**
 * Load all breadcrumbs from all submodules.
 *
 * Current breadcrumbs are held as static variable.
 *
 * @param $refresh
 *   If set to TRUE, reload breadcrumbs from database.
 *
 * @return
 *   An array of breadcrumb objects.
 */
function _custom_breadcrumbs_load_all_breadcrumbs($refresh = FALSE) {
  static $breadcrumbs;
  if ($refresh || !isset($breadcrumbs)) {
    $breadcrumbs = array();
    foreach (module_implements('cb_breadcrumb_info') as $module) {
      $more = custom_breadcrumbs_load_breadcrumbs($module);
      if (!empty($more)) {
        $breadcrumbs = array_merge($more, $breadcrumbs);
      }
    }
  }
  return $breadcrumbs;
}

/**
 * Set the breadcrumb trail to match the menu structure.
 * 
 * This function uses the same approach as in the menu_breadcrumb module.
 */
function custom_breadcrumbs_set_menu_breadcrumb() {
  $menu_item = menu_get_item();
  $menu_link = menu_link_load(db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s'", $menu_item['href'])));
  $use_menu = $menu_link['menu_name'];
  $menus =  variable_get('custom_breadcrumbs_menu_list', array() );
  if (in_array($use_menu, $menus)) {
    menu_set_active_menu_name($use_menu);
  }
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function custom_breadcrumbs_theme_registry_alter(&$theme_registry) {
  if (variable_get('custom_breadcrumbs_force_active_trail', FALSE) && !empty($theme_registry['links'])) {
    global $theme;
    // Store the existing theme functions.
    $themes = variable_get('custom_breadcrumbs_menu_theme', array());
    $themes[$theme] = array(
      'menu_item' => $theme_registry['menu_item']['function'],
      'menu_item_link' => $theme_registry['menu_item_link']['function'],
    );
    variable_set('custom_breadcrumbs_menu_theme', $themes);
    // Replace these with our own functions. We will call the original functions after call these override functions.
    $theme_registry['links']['function'] = 'custom_breadcrumbs_override_links';
    $theme_registry['menu_item_link']['function'] = 'custom_breadcrumbs_theme_menu_item_link';
    $theme_registry['menu_item']['function'] = 'custom_breadcrumbs_theme_menu_item';
  }
}

/**
 * Helper function to determine if a link is in the active trail.
 *
 * @param $link
 *   A menu link.
 *
 * @return
 *   TRUE if the link is in the active trail, FALSE otherwise.
 */
function custom_breadcrumbs_in_active_trail($link) {
  if (!isset($link) || !isset($link['href'])) {
    return FALSE;
  }
  $trail = menu_get_active_trail();
  if (!isset($trail)) {
    return FALSE;
  }
  foreach ($trail as $step) {
    if (isset($step['href']) && ($step['href'] == $link['href'] || $step['href'] == drupal_get_path_alias($link['href']))) {
      return TRUE;
    }
  }

  return FALSE;
}

function custom_breadcrumbs_override_links($links, $attributes = array('class' => 'links')) {
  $output = '';
  if (count($links) > 0) {
    $output = '<ul'. drupal_attributes($attributes) .'>';

    $num_links = count($links);
    $i = 1;

    foreach ($links as $key => $link) {
      $class = $key;

      // Add first, last and active classes to the list of links to help out themers.
      if ($i == 1) {
        $class .= ' first';
      }
      if ($i == $num_links) {
        $class .= ' last';
      }
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))) {
        $class .= ' active';
      }
      if (custom_breadcrumbs_in_active_trail($link) && ($link['href'] != '<front>')) {
        $class .= ' active-trail';
      }
      $output .= '<li'. drupal_attributes(array('class' => $class)) .'>';

      if (isset($link['href'])) {
        // Pass in $link as $options, they share the same keys.
        $output .= l($link['title'], $link['href'], $link);
      }
      elseif (!empty($link['title'])) {
        // Some links are actually not links, but we wrap these in <span> for adding title and class attributes
        if (empty($link['html'])) {
          $link['title'] = check_plain($link['title']);
        }
        $span_attributes = '';
        if (isset($link['attributes'])) {
          $span_attributes = drupal_attributes($link['attributes']);
        }
        $output .= '<span'. $span_attributes .'>'. $link['title'] .'</span>';
      }

      $i++;
      $output .= "</li>\n";
    }

    $output .= '</ul>';
  }
  return $output;
}

/* code cribbed from dhtml - modified to suit custom breadcrumbs */

/**
 * Preprocessor for menu_item_link.
 *
 * Adds an ID attribute to menu links and helps the module
 * follow the recursion of menu_tree_output().
 *
 * @param $link
 *   A menu link.
 */
function custom_breadcrumbs_theme_menu_item_link($link) {
  // Find out which theme function to dispatch to after preprocessing.
  global $theme;
  static $function;
  if (!isset($function)) {
    $registry = variable_get('custom_breadcrumbs_menu_theme', array());
    $function = isset($registry[$theme]) ? $registry[$theme]['menu_item_link'] : 'theme_menu_item_link';
  }

  if (isset($link['mlid'])) {
    // Some themes use options, others use localized_options. Populate both.
    $link['localized_options']['attributes']['id'] = 'custom_breadcrumbs_menu-'. _custom_breadcrumbs_menu_unique_id($link['mlid']);
    $link['options']['attributes']['id'] = $link['localized_options']['attributes']['id'];

    // Each link in series is another level of recursion. Add it to the stack.
    _custom_breadcrumbs_menu_stack($link);
    if (custom_breadcrumbs_in_active_trail($link)) {
      $link['localized_options']['attributes']['class'] = 'active';
    }
  }
  // Pass the altered variables to the normal menu themer.
  return $function($link);
}

function custom_breadcrumbs_theme_menu_item($link, $has_children, $menu = '', $in_active_trail = FALSE, $extra_class = NULL) {
  global $theme;
  static $function;

  if (!isset($function)) {
    $registry = variable_get('custom_breadcrumbs_menu_theme', array());
    $function = isset($registry[$theme]) ? $registry[$theme]['menu_item'] : 'theme_menu_item';
  }

  /* When theme('menu_item') is called, the menu tree below it has been
   * rendered already. Since we are done on this recursion level,
   * one element must be popped off the stack.
   */

  $item = _custom_breadcrumbs_menu_stack();

  // If there are children, but they were not loaded...
  if ($has_children && !$menu) {
    // Load the tree below the current position.
    $tree = _custom_breadcrumbs_menu_subtree($item);
    $force_active_trail = FALSE;
    if (!empty($tree)) {
      foreach ($tree as $sub => $data) {
        if (custom_breadcrumbs_in_active_trail($data['link'])) {
          $force_active_trail = TRUE;
        }
        else {
          $belows = (array)$data['below'];
          foreach ($belows as $id => $below) {
            // Descend...
            if (custom_breadcrumbs_in_active_trail($below['link'])) {
              $force_active_trail = TRUE;
            }
            else {
              unset($tree[$sub]['below'][$id]);
            }
          }
        }
      }
    }
    if ($force_active_trail) {
      // Render it...
      $menu = menu_tree_output($tree);
      $in_active_trail = TRUE;
    }

    // Sanitize tree. If we found no children, the item has none.
    if (!$menu) {
      $has_children = FALSE;
    }
  }

  // If the current item can expand, and is neither saved as open nor in the active trail, close it.
  if ($menu && !$in_active_trail) {
    $extra_class .= ' collapsed start-collapsed ';
  }
  // Pass the altered variables to the normal menu themer.
  return $function($link, $has_children, $menu, $in_active_trail, $extra_class);
}

/**
 * Traverses the menu tree and returns the sub-tree of the item indicated by the parameter.
 *
 * @param $stack
 *   An array of menu item links that are nested in each other in the tree.
 *
 * @return
 *   The items below the lowest item in the stack.
 */
function _custom_breadcrumbs_menu_subtree($item) {
  static $index = array();
  static $indexed = array();

  // This looks expensive, but menu_tree_all_data uses static caching.
  $tree = menu_tree_all_data($item['menu_name']);
  if (!isset($indexed[$item['menu_name']])) {
    $index += _custom_breadcrumbs_menu_index($tree);
    $indexed[$item['menu_name']] = TRUE;
  }
  // Traverse the tree.
  foreach ($index[$item['mlid']]['parents'] as $mlid) {
    $key = $index[$mlid]['key'];
    if (!isset($tree[$key])) {
      return array();
    }
    $tree = $tree[$key]['below'];
  }
  $key = $index[$item['mlid']]['key'];
  return isset($tree[$key]) ? $tree[$key]['below'] : array();
}

/**
 * Indexes the menu tree by mlid. This is needed to identify the items without relying on titles.
 *
 * This function is recursive.
 *
 * @param $tree
 *   A tree of menu items such as the return value of menu_tree_all_data().
 *
 * @return
 *   An array associating mlid values with the internal keys of the menu tree.
 */
function _custom_breadcrumbs_menu_index($tree, $ancestors = array(), $parent = NULL) {
  $index = array();
  if ($parent) $ancestors[] = $parent;
  foreach ($tree as $key => $item) {
    $index[$item['link']['mlid']] = array(
      'key' => $key,
      'parents' => $ancestors,
    );
    if (!empty($item['below'])) {
      $index += _custom_breadcrumbs_menu_index($item['below'], $ancestors, $item['link']['mlid']);
    }
  }
  return $index;
}

/**
 * Keep track of ID attributes and add a suffix to make it unique (when necessary).
 *
 * @param $id
 *   The link id.
 *
 * @return
 *   The link id, rendered unique by a suffix as needed.
 */
function _custom_breadcrumbs_menu_unique_id($id) {
  static $ids = array();
  if (!isset($ids[$id])) {
    $ids[$id] = 1;
    return $id;
  }
  else {
    return $id .'-'. $ids[$id]++;
  }
}

/**
 * Helper function for storing recursion levels.
 *
 * @param $link
 *   If a menu item link is passed, it will be appended to the stack.
 *   If none is given, the stack will be returned and popped by one.
 *
 * @return
 *   The stack, if no parameter is given.
 */
function _custom_breadcrumbs_menu_stack($link = FALSE) {
  static $stack = array();
  if ($link) {
    array_push($stack, $link);
  }
  else {
    return array_pop($stack);
  }
}

/**
 * Helper function to retrieve the module weight.
 *
 * @param $name
 *   The module name.
 *
 * @return
 *   The module weight.
 */
function _custom_breadcrumbs_get_module_weight($name) {
  $weight = (int) db_result(db_query("SELECT weight FROM {system} WHERE name = '%s'", $name));
  return $weight;
}

/**
 * Helper function to determine if a text string is php code and if it is, evaluate it.
 *
 * @param $text
 *   A potential code snippet to evaluate.
 * @param $objs
 *   An optional array of objects to make available to the php code snippet.
 *
 * @return
 *   If the text string contains a php code snippet, it will be evaluated, and if
 *   the result is an array, it will be returned. Otherwise nothing is returned.
 */
function extract_php($text, $objs = array()) {
  if (drupal_substr(trim($text), 0, 5) == '<?php') {
    // Strip php tags.
    $text = str_replace(array('<?php', '?>'), '', $text);
    foreach ($objs as $key => $obj) {
      $$key = $obj;
    }
    ob_start();
    $output = eval($text);
    ob_end_clean();
    return (is_array($output)) ? $output : NULL;
  }
}

/**
 * Helper function to determine if current path is in the excluded list.
 *
 * @return
 *   TRUE if the current path is on the custom breadcrumbs excluded path list,
 *   FALSE otherwise.
 */
function custom_breadcrumbs_exclude_path() {
  static $excluded;
  if (variable_get('custom_breadcrumbs_use_exclude_list', FALSE)) {
    if (!isset($excluded)) {
      $excluded = explode(',', variable_get('custom_breadcrumbs_exclude_list', ''));
    }
    if (!empty($excluded)) {
      module_load_include('inc', 'custom_breadcrumbs', 'custom_breadcrumbs_common');
      foreach ($excluded as $path) {
        if (_custom_breadcrumbs_match_path($_REQUEST['q'], trim($path))) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}
