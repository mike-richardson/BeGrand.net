<?php
// $Id: cd.module,v 1.1.2.17 2010/02/03 08:33:14 swentel Exp $

/**
 * @file
 * Comment displays module.
 */

/**
 * Implementation of hook_ds_api().
 */
function cd_ds_api() {

  $help = array(
    t('<h3>Comment displays</h3>
      <p>This module comes with a cd-comment.tpl.php, available in the templates folder, which is optimized for use with Comment Displays. You can copy the file to your themes folder to use your own version if you want.</p>')
  );

  return array(
    'title' => t('Comment displays'),
    'module' => 'cd',
    'object' => 'comment',
    'views_base' => 'comments',
    'types' => 'cd_get_types',
    'help' => $help,
  );
}

/**
 * Return comment types.
 */
function cd_get_types() {
  $types = array();
  $comment = new stdClass();
  $comment->name = t('Comment');
  $comment->type = 'comment';
  $types['comment'] = $comment;
  return $types;
}

/**
 * Implementation of hook_ds_fields().
 */
function comment_ds_fields($type_name, $build_mode, $extra) {
  $fields = array(
    'name' => array(
      'title' => t('Username'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'mail' => array(
      'title' => t('E-mail'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'created' => array(
      'title' => t('Post date'),
      'type' => DS_FIELD_TYPE_CODE,
      'status' => DS_FIELD_STATUS_DEFAULT,
      'properties' => array('code' => '<?php print format_date($object->timestamp, "custom", "d.m.y"); ?>'),
    ),
    'subject' => array(
      'title' => t('Subject'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'comment' => array(
      'title' => t('Comment'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
    'links' => array(
      'title' => t('Links'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    ),
  );

  if (variable_get('user_signatures', 0)) {
    $fields['signature'] = array(
      'title' => t('Signature'),
      'type' => DS_FIELD_TYPE_PREPROCESS,
      'status' => DS_FIELD_STATUS_STATIC,
    );
  }

  if (variable_get('user_pictures', 0)) {
    $fields['picture'] = array(
      'title' => t('Picture'),
      'type' => DS_FIELD_TYPE_THEME,
      'status' => DS_FIELD_STATUS_STATIC,
      'properties' => array(
        'formatters' => array(
          'ds_picture' => t('User picture'),
        ),
      ),
    );
  }

  return array('cd' => $fields);
}

/**
 * Implementation of hook_content_build_modes().
 */
function cd_content_build_modes() {
  $build_modes = array(
    'cd' => array(
      'title' => t('Comment displays'),
      'build modes' => array(
        'full' => array(
          'title' => t('Full comment'),
          'module' => 'cd',
          'weight' => -1,
        ),
        'list' => array(
          'title' => t('Teaser'),
          'module' => 'cd',
          'weight' => -1,
        ),
      ),
    )
  );

  return $build_modes;
}

/**
 * Implementation of hook_registry_alter().
 */
function cd_theme_registry_alter(&$registry) {
  $path = drupal_get_path('module', 'cd') .'/templates';
  array_unshift($registry['comment']['theme paths'], $path);
}

/**
 * Implementation of hook_comment().
 */
function cd_comment(&$comment, $op) {
  if ($op == 'view') {
    $comment->type = 'comment';
    if (empty($comment->build_mode)) {
      $comment->build_mode = 'full';
    }
    ds_build_fields_and_regions($comment, 'cd');
  }
}

/**
 * Implementation of hook_preprocess_comment().
 */
function cd_preprocess_comment(&$vars) {

  // add links to comment object
  if (isset($vars['links'])) {
    $vars['comment']->links = $vars['links'];
  }
  $comment = $vars['comment'];

  // Add cd-comment template suggestion.
  $vars['template_files'][] = 'cd-comment';

  // Break all the rendering if needed.
  if (!$comment->render_by_ds) {
    $vars['template_files'][] = 'comment';
    return;
  }

  $content = ds_render_content($comment, 'cd', (array) $vars['comment']);
  $vars['content'] = $content;

}

/**
 * Render the comment object through the DS views plugin.
 *
 * @param array $vars The variables to manipulate.
 * @param string $build_mode The build mode to use on this object.
 */
function ds_views_row_comments(&$vars, $build_mode) {

  $cid = $vars['row']->cid;
  if (!is_numeric($cid)) {
    return;
  }

  $node = new stdClass();
  $links = array();
  $comment = cd_comment_load($cid);
  if (empty($comment)) {
    return;
  }

  $show_links = ds_show_links('cd', 'comment', $build_mode);
  if ($show_links) {
    $links = module_invoke_all('link', 'comment', $comment, 0);
    drupal_alter('link', $links, $node);
  }

  $comment->build_mode = $build_mode;
  $vars['object'] = theme('comment_view', $comment, $node, $links);

}

/**
 * Load the entire comment by cid, also load the user from it.
 *
 * @param $cid
 *   The identifying comment id.
 * @return
 *   The comment object.
 */
function cd_comment_load($cid) {
  return db_fetch_object(db_query('SELECT * FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE cid = %d', $cid));
}
