<?php
// $Id: directory.module,v 1.31 2008/07/16 06:08:25 augustin Exp $

/**
 * @file
 * Creates a directory view of all taxonomy terms of the site.
 *
 * Authored by Matt Westgate <drupal at asitis dot org>
 * Original Frontier implementation by John VanDyk <jvandyk at iastate dot edu>
 * Drupal 4.7 maintainer Michael Curry, Exodus Development, Inc. http://exodusdev.com exodusdev@gmail.com
 * Current maintainer (drupal 5 onwards) Augustin Masquilier, http://overshoot.tv/ , http://minguo.info/
 */


/********************************************************************
 * Drupal hooks
 * *****************************************************************/

/**
 * Implementation of hook_help().
 */
function directory_help($path, $arg) {
  if ('taxonomy/term/%' == $path) {
    return theme('directory_taxonomy_subterms', arg(2));
  }
}

/**
 * Implementation of hook_init().
 */
function directory_init() {
  drupal_add_css(drupal_get_path('module', 'directory') . '/directory.css');
}

/**
 * Implementation of hook_menu().
 */
function directory_menu() {
  $items = array();

  $items['directory'] = array(
    'title' => 'directory',
    'page callback' => 'directory_page',
    'access arguments' => array('access content')
  );
  $items['admin/settings/directory'] = array(
    'title' => 'Directory Settings',
    'description' => 'Set which node types and which vocabularies to include, the depth to display on the directory page, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('directory_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies AS $vid => $vocabulary) {
    $items['directory/vocabulary/' . $vocabulary->vid] = array(
      'title' => t('Directory for !vocabulary-name', array('!vocabulary-name' => $vocabulary->name)),
      'page callback' => 'directory_vocabulary_page',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_SUGGESTED_ITEM,
    );
  }

return $items;
}

/**
 * Implementation of hook_settings().
 */
function directory_admin_settings() {
  $output = '';

  if (function_exists('taxonomy_help')) {
    $vocs[0] = '<' . t('none') . '>';
    foreach (taxonomy_get_vocabularies() as $vid => $voc) {
      $vocs[$vid] = $voc->name;
    }
  }

  $nodetypes = array();
  foreach (node_get_types() AS $type) {
    $nodetypes[$type->type] = $type->name;
  }

  $form['directory_support_maintainers'] = array(
    '#type' => 'fieldset',
    '#title' => t("Support"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );


  $form['directory_support_maintainers']['directory_support_text'] = array(
    '#value' => '<p>'
      . t("<strong>The directory module is charity-ware</strong>.") . '<br />'
      . t("Please contribute back by supporting the charity work of the following web sites. ") . '<br />'
      . t("None of the web sites listed here are for profit, and none of them carry advertising.") . '<br />'
      . t("They are all <strong>web sites dedicated to creating a better tomorrow for the whole society</strong>.") . '<br />'
      . '</p>'
      . '<ul>'
      . '<li>' . t('<a href="http://activistsolutions.org/">Activist Solutions</a>: harvesting grassroots power.') . '</li>'
      . '<li>' . t('<a href="http://www.reuniting.info/">Reuniting</a>: healing with sexual relationships.') . '</li>'
      . '<li>' . t('<a href="http://overshoot.tv/">Overshoot TV</a>: making high quality videos and documentaries promoting environmental and economical sustainability.') . '</li>'
      . '<li>' . t('<a href="http://minguo.info/">Minguo.info</a>: promotting better voting systems, and an experiment in direct democracy.') . '</li>'
      . '<li>' . t('<a href="http://www.wechange.org/">We Change</a>: because we live in a world of solutions...') . '</li>'
      . '</ul>'
      . '<p>'
      . t("You can support those web sites in the following ways:") . '<br />'
      . '</p>'
      . '<ul>'
      . '<li>' . t("Blog about them.") . '</li>'
      . '<li>' . t("Put links in a block in a sidebar.") . '</li>'
      . '<li>' . t("Put links in any other logical place in your web site, where your visitors will find the information useful.") . '</li>'
      . '<li>' . t("Register and participate if they match your own interest!") . '</li>'
      . '<li>' . t("We also appreciate if, on behalf of this maintainer,  you help <em>any charity of your choice</em>, or/and make a donation to them.") . '</li>'
      . '</ul>'
      . '<p>'
      . t("Please, let the maintainer know about the options you chose.") . '<br />'
      . '</p>'
      . '<p>'
      . t("Thank you for your support and cooperation.") . '<br />'
      . '</p>',
  );

  $form['directory_support_maintainers']['directory_maintainers'] = array(
    '#type' => 'markup',
    '#value' => '<div style="border: solid 1px #eee; margin: .5em; padding: .5em;"> Module development sponsored by
      <ul>
      <li><a href="http://exodusdev.com">Exodus Development</a> (Drupal 4.7)</li>
      <li><a href="http://activistsolutions.org/">Activist Solutions</a> (Drupal 5 onwards)</li>
      <li><a href="http://minguo.info/">minguo.info</a> (Drupal 5 onwards)</li>
      </ul></div>',
  );

  $form['directory_no_nodes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('<em><strong>Exclude</strong></em> these node types from directory pages'),
    '#default_value' => variable_get('directory_no_nodes', array()),
    '#options' => $nodetypes,
    '#description' => t('<em><strong>Please note:</strong> Any node types that are checked here will <strong>NOT be included</strong> in the directory listings.  All other types will be included.</em>'),
    '#required' => FALSE,
  );

  $form['directory_vocabularies_root'] = array(
    '#type' => 'select',
    '#title' => t('Which vocabularies should be displayed on the directory main page'),
    '#default_value' => variable_get('directory_vocabularies_root', ''),
    '#options' => $vocs,
    '#description' => t('The vocabularies that will visible at the root level of the directory page.'),
    '#extra' => 0,
    '#multiple' => TRUE,
  );

  $form['directory_vocabularies_collapsed'] = array(
    '#type' => 'select',
    '#title' => t('Which vocabularies are collapsed by default?'),
    '#description' => t('The checked vocabularies will be collapsed by default if they are shown on the main directory page.'),
    '#options' => $vocs,
    '#default_value' => variable_get('directory_vocabularies_collapsed', array()),
    '#required' => FALSE,
    '#extra' => 0,
    '#multiple' => TRUE,
  );

  $form['directory_show_child_counts'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show count of nodes in categories'),
    '#default_value' => variable_get('directory_show_child_counts', TRUE),
    '#description' => t('Append a count of items contained in each term, if the count is greater than zero.'),
    '#required' => FALSE,
  );

  $form['directory_hide_empty_terms'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide terms with no content'),
    '#default_value' => variable_get('directory_hide_empty_terms', FALSE),
    '#description' => t('If checked, hide taxonomy terms having no node content.'),
    '#required' => FALSE,
  );

  $form['directory_help'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text for the Directory home'),
    '#default_value' => variable_get('directory_help', ''),
    '#cols' => 70,
    '#rows' => 5,
    '#description' => t('This text will be displayed at the top of <strong>the main directory page</strong>.  It is useful for helping or instructing your users.'),
  );

  $form['directory_term_help'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text for each Directory term page'),
    '#default_value' => variable_get('directory_term_help', ''),
    '#cols' => 70,
    '#rows' => 5,
    '#description' => t('This text will be displayed at the top of <strong>each directory term page</strong>.  It is useful for helping or instructing your users.'),
  );


  $form['directory_support_websites'] = array(
    '#type' => 'fieldset',
    '#title' => t("Other charitable web sites..."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['directory_support_websites']['directory_support_other'] = array(
    '#value' => '<p>'
      . t("If your web site meets <em>all</em> the following criteria, you can ask for it to be listed here.")
      . '</p>'
      . '<ul>'
      . '<li>' . t('It uses directory module.') . '</li>'
      . '<li>' . t('It is a charity (registered or not) dedicated to creating a better society.') . '</li>'
      . '<li>' . t('It is not for profit.') . '</li>'
      . '<li>' . t('It does not carry any advertising (e.g. google ads).') . '</li>'
      . '</ul>',
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_theme().
 */
function directory_theme($existing, $type, $theme, $path) {
  return array(
    'directory_node_count' => array(
      'arguments' => array('nodecount' => NULL, 'term' => NULL),
    ),
    'directory_list_subterms' => array(
      'arguments' => array('terms' => NULL),
    ),
    'directory_list_terms' => array(
      'arguments' => array('terms' => NULL, 'title' => '', 'parent' => 0),
    ),
    'directory_pager_detail' => array(
      'arguments' => array('limit' => NULL, 'element' => 0, 'format' => '%d through %d of %d.'),
    ),
    'directory_home_vocabulary' => array(
      'arguments' => array('vid' => NULL, 'collapse' => TRUE),
    ),
    'directory_resource' => array(
      'arguments' => array('tid' => NULL, 'filter' => NULL, 'fid' => NULL),
    ),
    'directory_taxonomy_subterms' => array(
      'arguments' => array('tid' => NULL),
    ),
  );
}

/********************************************************************
 * Module Specific :: Public Functions
 * ******************************************************************/

/**
 * This is the Controller for directory viewing.
 */
function directory_page() {
  $output = '';
  if ($help = variable_get('directory_help', '')) {
    $output = '<div class="directory-help">' . $help . '</div>';
  }
  $allowed_vids = variable_get('directory_vocabularies_root', array());

  if (empty($allowed_vids)) {
    $output .= t('The module has not been properly configured yet. No vocabulary is set to be displayed.');
  }

  foreach (taxonomy_get_vocabularies() as $v) {
    if (in_array($v->vid, $allowed_vids)) {
      $output .= theme('directory_home_vocabulary', $v->vid);
    }
  }

  return $output;
}


/********************************************************************
 * Drupal Hooks :: Themeable Functions
 * ******************************************************************/

/**
 * @addtogroup themeable
 * @{
 */


/** @} End of addtogroup themeable */

/********************************************************************
 * Module Specific :: Private Functions
 * ******************************************************************/

/**
 * Theme one section of the directory home page, corresponding to one vocabulary.
 * There will be as many sections as there are vocabularies displayed on the home page.
 *
 * @param $vid
 *   integer: the vocabulary ID.
 *
 * @param $collapse
 *   boolean: say if the vocabulary should follow the collapsed setting.
 *            if we are going to print only one vocabulary
 *            it would be bad design to have it collapsed.
 *
 * @return $output
 *   formatted html.
 */
function theme_directory_home_vocabulary($vid, $collapse = TRUE) {
  static $js_added;
  $vocabulary = taxonomy_vocabulary_load($vid);
  $terms = taxonomy_get_children(0, $vid);


  $collapsed_vids = array();
  if ($collapse) {
    $collapsed_vids = variable_get('directory_vocabularies_collapsed', array());
  }

  $collapsed_string = '';
  if (in_array($vid, $collapsed_vids)) {
    $collapsed_string = 'directory-home-vocabulary-collapsed';
  }

  if (empty($js_added)) {
    drupal_add_js(drupal_get_path('module', 'directory') . '/directory.js');
    drupal_add_js("var toggleT = " . drupal_to_js(t('show / hide')) . ';', 'inline');
    $js_added = TRUE;
  }

  $output = '<div class="directory-home-vocabulary ' . $collapsed_string . ' directory-home-vocabulary-collapsible" id="directory-vid-' . $vocabulary->vid . '">';
  $output .= theme('directory_list_terms', $terms,  t('By !vocabulary-name', 
    array('!vocabulary-name' => l($vocabulary->name, 'directory/vocabulary/'. $vocabulary->vid))));
  $output .= '</div>';

  return $output;
}

/**
 * Display a list of terms
 * Each list item is a link to its corresponding term page.
 *
 * @param $terms
 *   An array of term objects.
 *
 * @param $title
 *   Translated text.
 *
 // FIXME: $parent not needed ?? beginner.
 * @param $parent
 *   Display all the children whose parent tid is $parent.
 *   If we are on the main page, $parent = 0 and all terms within the vocabulary are displayed.
 *   If we are on a term page, $parent = $tid of that term and we display only the sub-terms.
 *
 * @return
 *  formatted html
 */
function theme_directory_list_terms($terms, $title = '', $parent = 0) {
  $output = '';
  $showcounts = variable_get('directory_show_child_counts', TRUE);
  $hideempty = variable_get('directory_hide_empty_terms', FALSE);

  $item_span = '';

  // Build a list of categories (taxonomy terms) and child counts.
  foreach ($terms as $term) {
    $nodecount = array('count_own' => 0, 'count_children' => 0);
    if ($showcounts || $hideempty) {
      $nodecount = directory_taxonomy_term_count_nodes($term->tid);
    }

    $nodecount_span = '';
    if ($showcounts) {
      $item_span = '<span class="directory-category-nochildren">';
      if ($nodecount['count_own'] || $nodecount['count_children']) {
        $item_span = '<span class="directory-category-haschildren">';
        $nodecount_span = theme('directory_node_count', $nodecount, $term);
      }
    }

    // if desired, exclude items
    if ((!$hideempty) || ($nodecount['count_own'] || $nodecount['count_children'])) {
      $children = taxonomy_get_children($term->tid);
      if (is_array($children)) {
        $children = theme('directory_list_subterms', $children);
      }
      $items[] = array('data' => $item_span . l($term->name, "taxonomy/term/$term->tid", (($term->description) ? array('title' => $term->description) : array())) . $nodecount_span . '</span>', 'children' => $children);
    }
  }

  $output = theme('item_list', $items, $title);
  return $output;
}

/**
 * Prints the number of nodes that belong to a term.
 *
 * @param $nodecount
 *   array returned by directory_taxonomy_term_count_nodes($term->tid)
 *
 * @param $term
 *   term object that may be needed by some themes.
 *
 * @return
 *   either an empty string '' if there is nothing to display,
 *   or formatted HTML.
 *
 */
function theme_directory_node_count($nodecount, $term) {
  $output = "<span class='directory-nodecount'> [" . $nodecount['count_own'];
  $output .= $nodecount['count_children'] ? ' + ' . $nodecount['count_children'] . ']</span>' : ']</span>';
  return $output;
}

/**
 * Recursively display the sub-terms within a themed list
 *
 * @param $terms
 *   An array of term objects.
 *
 * @return
 *   array of elements to put in the themed list.
 */
function theme_directory_list_subterms($terms) {
  $items = array();
  $showcounts = variable_get('directory_show_child_counts', TRUE);
  $hideempty = variable_get('directory_hide_empty_terms', FALSE);
  foreach ($terms as $term) {
    $nodecount = 0;
    if ($showcounts || $hideempty) {
      $nodecount = directory_taxonomy_term_count_nodes($term->tid);
    }
    $nodecount_span = '';
    if ($showcounts) {
      $item_span = '<span class="directory-category-nochildren">';
      if ($nodecount['count_own'] || $nodecount['count_children']) {
        $item_span = '<span class="directory-category-haschildren">';
        $nodecount_span = theme('directory_node_count', $nodecount, $term);
      }
    }
    // if desired, exclude items
    if ((!$hideempty) || ($nodecount['count_own'] || $nodecount['count_children'])) {
      $children = NULL;
      if ($get_children = taxonomy_get_children($term->tid)) {
        $children = theme('directory_list_subterms', $get_children);
      }

      $items[] = array('data' => $item_span . l($term->name, "taxonomy/term/$term->tid", (($term->description) ? array('title' => $term->description) : array())) . $nodecount_span . '</span>', 'children' => $children);
    }
  }
  return $items;
}

/**
 * Set the title of a directory view as well as create the breadcrumb trail
 * back to the directory root.
 */
function directory_set_breadcrumb($tid) {
  $breadcrumb[] = l(t('Home'), '');
  $breadcrumb[] = l(t('browse'), 'directory');

  $taxonomy = array_reverse(taxonomy_get_parents_all($tid));
  $term = array_pop($taxonomy);
  $current_page = $term->name;
  drupal_set_title($current_page);

  foreach ($taxonomy as $term) {
    $breadcrumb[] = l($term->name, "taxonomy/term/$term->tid");
  }
  if ($current_page) {
    $breadcrumb[] = "<strong>$current_page</strong>";
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Return a navigaton toolbar for alphatical directory browsing.
 */
function directory_toolbar_alpha($current_letter) {
  $letters = array('0-9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
                   'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
  foreach ($letters as $letter) {
    $items[] = l($letter, 'directory/' . drupal_strtolower($letter), (drupal_strtoupper($current_letter) == $letter ? array('class' => 'active') : array()));
  }

  return '<div class="directory-toolbar alpha">' . implode(' ', $items) . '</div>';
}

/**
 * Create the filter links to sort a directory by another vocabulary.
 */
function directory_filters_toolbar($uri) {
  $output = '';

  $uri_array = explode('/', $uri);
  foreach ($uri_array as $key => $part) {
    if ($part == 'directory' || $part == 'eiir_search' && is_numeric($uri_array[$key + 1])) {
      $tid = $uri_array[$key + 1];
      $clean_uri = $part . '/' . $tid;
      $current_filter = trim(str_replace($clean_uri, '', $uri), '/');
    }
  }

  if ($clean_uri && $tid) {
    foreach (taxonomy_get_vocabularies() as $v) {
      $valid_filters[$v->name] = "vid/$v->vid";
    }

    $vid = db_result(db_query('SELECT vid FROM {term_data} WHERE tid = %d', $tid));
    $hide_filter    = "vid/$vid";
    $current_filter = (!$current_filter) ? 'alpha' : $current_filter;

    $output = '<div class="directory-filter-wrapper">' . t('Sort by:<br />');
    foreach ($valid_filters as $name => $filter_params_as_uri) {
      if ($hide_filter != $filter_params_as_uri) {
        if (strstr($current_filter, $filter_params_as_uri)) {
          $links[] = '<input type="radio" name="sorted" checked="checked" /> ' . t("<strong>$name</strong>");
        }
        else {
          $new_uri = $clean_uri;
          if ($filter_params_as_uri != 'alpha') {
            $new_uri .= '/' . $filter_params_as_uri;
          }

          $url = url($new_uri);
          $links[] = '<input type="radio" name="sorted" onClick="javascript:void(window.location.href = \'' . $url . '\')" /> ' . l($name, $url);
        }
      }
    }
    $output .= implode('<br />', $links) . '</div>';
  }

  return $output;
}

/**
 * Format a summary of the current pager position, such as "6 through 10 of 52".
 *
 * @param $limit
 *   The number of query results to display per page.
 * @param $element
 *   An optional integer to distinguish between multiple pagers on one page.
 * @param $format
 *   A printf-style format string for customizing the pager text.
 * @return
 *   An HTML string that generates this piece of the query pager.
 *
 * @ingroup themeable
 */
function theme_directory_pager_detail($limit, $element = 0, $format = '%d through %d of %d.') {
  global $pager_from_array, $_directory_pager_total;

  $output = '<div class="pager-detail">';
  if ($_directory_pager_total[$element] > (int)$pager_from_array[$element] + 1) {
    $output .= sprintf($format, (int)$pager_from_array[$element] + 1, ((int)$pager_from_array[$element] + $limit <= $_directory_pager_total[$element] ? (int)$pager_from_array[$element] + $limit : $_directory_pager_total[$element]), $_directory_pager_total[$element]);
  }
  $output .= '</div>';

  return $output;
}

/**
 * This is a replacement function for taxonomy_term_count_nodes.
 * See: http://drupal.org/node/144969 (drupal issue)
 * and: http://drupal.org/node/145023 (directory issue).
 *
 * Count the number of published nodes classified by a term.
 *
 * @param $tid
 *   The term's ID
 *
 * @param $type
 *   The $node->type. If given, taxonomy_term_count_nodes only counts
 *   nodes of $type that are classified with the term $tid.
 *
 * @param $save_to_db
 *   This function is recursive, and we don't need to save the result in the DB at each iteration.
 *   $save_to_db is set to FALSE at each nested call, so that the actual saving to DB can happen only
 *   when the function exits the last time.
 *
 * @return $array
 *   where:
 *     $array['count_own'] being the number of nodes within the term proper.
 *     $array['count_children'] being the number of nodes in children terms, not counting those which are already counted in the parent term.
 *     $array['own_nodes'] array of nid's within this $tid.
 *     $array['children_nodes'] array of all the descendent nid's from children terms, not including those already set as one's own.
 *
 *   Results are statically cached.
 * Also, in order to improve performance accross requests, we cache the serialized array on database, in {cache_page} (this table is flushed each time a node or a taxonomy item is added/updated/deleted).
 */
function directory_taxonomy_term_count_nodes($tid, $type = 0, $save_to_db = TRUE) {
  static $count = array();
  $modified = FALSE; // We keep track of modification of $count, to check whether we need to save it to DB.

  if (empty($count)) {
    $count = cache_get('taxonomy_term_count_nodes', 'cache_page');
    if ($count) {
      $count = unserialize($count->data);
    }
    else { // Initialize $count if the cache is empty.
      $count = array();
    }
  }

  if (!isset($count[$type])) {
    $modified = TRUE;
    $count[$type] = array();
    // In the queries below, we cannot use 'SELECT t.tid, COUNT(n.nid) AS c FROM ...'
    // because a node may be assigned more than one term and be counted more than once.
    // We therefore take note of the nid's and count the number of items in the $count array,
    // making sure there is no duplicate.

    // $type == 0 always evaluates TRUE if $type is a string
    if (is_numeric($type)) {
      $result = db_query(db_rewrite_sql('SELECT t.tid, n.nid FROM {term_node} t JOIN {node} n ON t.nid = n.nid WHERE n.status = 1', 't', 'tid'));
    }
    else {
      $result = db_query(db_rewrite_sql("SELECT t.tid, n.nid FROM {term_node} t JOIN {node} n ON t.nid = n.nid WHERE n.status = 1 AND n.type = '%s'", 't', 'tid'), $type);
    }
    while ($item = db_fetch_object($result)) {
      if (!isset($count[$type][$item->tid])) {
        $count[$type][$item->tid] = array('own_nodes' => array(), 'count_children' => 0, 'children_nodes' => array());
      }
      $count[$type][$item->tid]['own_nodes'][$item->nid] = 1;
    }
  }

  if (!isset($count[$type][$tid]['count_own'])) {
    $modified = TRUE;

    if (!isset($count[$type][$tid]['own_nodes'])) { // It's an empty term, not set in the previous code block.
      $count[$type][$tid] = array('count_own' => 0, 'own_nodes' => array(), 'count_children' => 0, 'children_nodes' => array());
    }
    else {
      $count[$type][$tid]['count_own'] = count($count[$type][$tid]['own_nodes']);
    }

    foreach (_taxonomy_term_children($tid) as $c) {
      if ($children = directory_taxonomy_term_count_nodes($c, $type, FALSE)) { // FALSE: we do not need to save $count in the db at this iteration.
        // Add the children's own nodes:
        if (is_array($children['own_nodes'])) {
          foreach ($children['own_nodes'] AS $child_nid => $n) {
            if (!isset($count[$type][$tid]['own_nodes'][$child_nid])) { // make sure the nid is not already counted for the parent.
              $count[$type][$tid]['children_nodes'][$child_nid] = 1;
            }
          }
        }
        // Add the nodes of the children's children.
        if (is_array($children['children_nodes'])) {
          foreach ($children['children_nodes'] AS $child_nid => $n) {
            if (!isset($count[$type][$tid]['own_nodes'][$child_nid])) { // make sure the nid is not already counted for the parent.
              $count[$type][$tid]['children_nodes'][$child_nid] = 1;
            }
          }
        }
      }
    }
    $count[$type][$tid]['count_children'] = count($count[$type][$tid]['children_nodes']);
  }

  if ($modified && $save_to_db) {
    $cache = serialize($count);
    // the cached data will be used for at least one hour before being flushed.
    // TODO, make the nb of seconds before this cache is cleared configurable: time() + variable_get();
    cache_set('taxonomy_term_count_nodes', $cache, 'cache_page', time() + 60 * 60);
  }

  return $count[$type][$tid];
}

/**
 * Menu callback for directory/vocabulary.
 *
 * @param $vid
 *   the vocabulary Id.
 */
function directory_vocabulary_page($vid) {
  $vocabulary = taxonomy_vocabulary_load($vid);
  // If we don't have a real vocabulary, redirect to the main directory page.
  if (!$vocabulary) {
    drupal_goto('directory');
  }
  else {
    return theme_directory_home_vocabulary($vocabulary->vid, FALSE);
  }
}

/**
 * Theme a container to list children terms of a taxonomy term.
 *
 * @param $tid integer
 *   the ID of the term whose children to display
 */
function theme_directory_taxonomy_subterms($tids) {
  $tids = explode(' ', $tids); // assuming $tid1+$tid2. 
  if (1 == count($tids)) {
    $tids = explode(',', $tids[0]); // looking for $tid1,$tid2 instead. 
  }
  $output = '';
  
  // If we have more than one term, we print a link to a single term page.
  $add_link = FALSE;
  if (count($tids) > 1) {
    $add_link = TRUE;
  }

  foreach ($tids AS $tid) {
    $term = taxonomy_get_term($tid);
    if ($children = taxonomy_get_children($tid)) {
      $output .= '<div class="subterms">';
      $items = theme('directory_list_subterms', $children);
      if ($add_link) { 
        $title = t('Subterms for !term', array('!term' => l($term->name, 'taxonomy/term/' . $term->tid)));
      }
      else {
        $title = t('Subterms');
      }
      $output .= theme('item_list', $items, $title);
      $output .= '</div>';
    }
  }
  return $output;
}

